apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'

apply plugin: 'codenarc'
apply from: './properties.gradle'

apply from: "scriptGradle/assembler.gradle"
apply from: "scriptGradle/distribution.gradle"
apply from: "scriptGradle/release.gradle"

libsDirName = './target'

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'basicEntity'

repositories {
    maven { url "http://localhost:8487/nexus/content/groups/public/" }
}

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

dependencies {
    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
    compile ("javax.validation:validation-api:${javaxValidationVersion}")
    compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
    compile ("org.hibernate:hibernate-core:${hibernateVersion}")
    compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    compile ("org.springframework:spring-context:${springVersion}")

    compile ("org.joda:joda-money:${jodaMoneyVersion}")

    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
    compile("org.codehaus.jackson:jackson-core-asl:${jacksonMapperVersion}")
    //compiler("joda-time:joda-time-hibernate:${jodaTimeHibernateVersion}")

    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")
    runtime("org.hsqldb:hsqldb:${hsqldbVersion}")

    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:slf4j-ext:$slf4jVersion")
    //compile("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-core:$logbackVersion")

    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("junit:junit:$junitVersion")

}

configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}

/*jar {
 baseName = 'entity_basic'
 groupId 'com.treewidth'
 artifactId 'libtw'
 version '1.0'
 exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
 manifest {
 attributes 'Implementation-Title': 'common-entity',
 'Implementation-Version': version,
 'Built-By': System.getProperty('user.name'),
 'Built-Date': new Date(),
 'Built-JDK': System.getProperty('java.version'),
 'Built-Gradle': gradle.gradleVersion
 }
 }*/

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://localhost:8487/nexus/content/groups/public/"){
                authentication ( userName: '${nexusLogin}', password: '${nexusPassword}' )
            }
        }
    }
}

project.tasks.test.configure { includes = ['**/*Test.class']}

test {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
    testLogging.showStandardStreams = true
}

task wrapper(type: Wrapper) { gradleVersion = '2.1' }

