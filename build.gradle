import java.awt.GraphicsConfiguration.DefaultBufferCapabilities;
import java.lang.annotation.Target;

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
//apply plugin: 'pmd'
apply plugin: 'scala'
apply plugin: 'build-dashboard'
apply plugin: 'codenarc'
apply from: './properties.gradle'

applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
}

sourceSets {
    intTest
    main {
        java {
            srcDir 'src/main/java'
        }
        scala {
            srcDir 'src/main/scala'
        }
        groovy {
           srcDir 'src/main/groovy'
        }
        resources {
            srcDir 'src/main/resources'
        }

    }
    test {
        java {
            srcDir 'src/test/java'
        }
        scala {
            srcDir 'src/test/scala'
        }
        groovy {
           srcDir 'src/test/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }

    }

}



dependencies {
   

    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
    compile ("javax.validation:validation-api:${javaxValidationVersion}")
    compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
    compile ("org.hibernate:hibernate-core:${hibernateVersion}")
    compile ("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    
    compile ("joda-time:joda-time:${jodaTimeVersion}")
    compile ("org.joda:joda-money:${jodaMoneyVersion}")
   
    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonMapperVersion}")
    compile("org.codehaus.jackson:jackson-core-asl:${jacksonMapperVersion}")
    //compiler("joda-time:joda-time-hibernate:${jodaTimeHibernateVersion}")
    
    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")     
    runtime("org.hsqldb:hsqldb:${hsqldbVersion}")
  
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:slf4j-ext:$slf4jVersion")
    //compile("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-core:$logbackVersion")
    
    testCompile("com.googlecode.catch-exception:catch-exception:${catchExceptionVersion}")
    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("junit:junit:$junitVersion")
 
}

configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}

jar {
    baseName = 'entity_basic'
    version =  '0.0.1'

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Implementation-Title': 'Gradle camel-cxf',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}



project.tasks.test.configure {
    includes = ['**/*Test.class']
}

test {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
    testLogging.showStandardStreams = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '10.1'
}

